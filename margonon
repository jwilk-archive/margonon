#!/usr/bin/env python3

# Copyright Â© 2004-2017 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import sys

def stred(lst):
    if lst:
        return ' '.join(map(str, lst))
    else:
        return '0'

def normalize_line(line):
    return ''.join(
        'X '[c.isspace()]
        for c in line
    )

def is_line_double_width(line):
    if len(line) & 1:
        return False
    it = iter(line)
    for x, y in zip(it, it):
        if x != y:
            return False
    return True

def reduce_line_width(line):
    return ''.join(
        line[2 * n]
        for n in range(len(line) // 2)
    )

def smoothen(pict):
    if all(is_line_double_width(line) for line in pict):
        pict = [reduce_line_width(line) for line in pict]
    max_width = max(len(line) for line in pict)
    return [
        normalize_line(line) + (max_width - len(line)) * ' '
        for line in pict
    ]

def main():
    s = [line.rstrip('\r\n') for line in sys.stdin]
    s = smoothen(s)
    width = len(s[0])
    height = len(s)
    print(width, height)
    for y in range(height):
        c = 0
        lst = []
        prev = ' '
        for x in range(width):
            curr = s[y][x]
            if (prev == 'X') and (curr == ' '):
                lst.append(c)
                c = 0
            elif curr == 'X':
                c += 1
            prev = curr
        if c > 0:
            lst.append(c)
        print(stred(lst))
    for x in range(width):
        c = 0
        lst = []
        prev = ' '
        for y in range(height):
            curr = s[y][x]
            if (prev == 'X') and (curr == ' '):
                lst.append(c)
                c = 0
            elif curr == 'X':
                c += 1
            prev = curr
        if c > 0:
            lst.append(c)
        print(stred(lst))

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
